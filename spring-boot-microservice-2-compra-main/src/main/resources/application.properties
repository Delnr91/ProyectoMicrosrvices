# ==========================
# Application Configuration
# ==========================
spring.application.name=compra-service
server.port=4444

# ==========================
# DataSource Configuration (PostgreSQL)
# ==========================
spring.datasource.url=jdbc:postgresql://localhost:5433/db_compra?currentSchema=sc_compra&ssl=false
# NOTA: El puerto 5433 es un ejemplo si tu otro PostgreSQL para inmuebles usa 5432. Ajusta seg\u00FAn sea necesario.
#       Aseg\u00FArate de que el nombre de la base de datos (db_compra) y el schema (sc_compra) sean \u00FAnicos si compartes instancia PostgreSQL,
#       o usa el mismo si prefieres tenerlo todo en una (aunque separar por servicio es buena pr\u00E1ctica).
spring.datasource.username=admin_compra
spring.datasource.password=CompraAdmin2025$
spring.datasource.driver-class-name=org.postgresql.Driver

# ==========================
# JPA / Hibernate Configuration
# ==========================
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# Para la primera ejecuci\u00F3n, 'update' puede ayudar a crear el schema y las tablas.
# Una vez creado, c\u00E1mbialo a 'validate' para mayor seguridad.
# Si prefieres crear el schema y tablas manualmente con un script SQL, usa 'validate' o 'none'.
# O 'validate' si creas el schema manualmente
spring.jpa.hibernate.ddl-auto=update
# Mantenlo en true durante el desarrollo para ver las queries
spring.jpa.show-sql=true

# Si usas un schema espec\u00EDfico (sc_compra), Hibernate necesita saberlo para generar DDL correctamente.
# Esto es importante si ddl-auto es 'create' o 'update'.
# Si currentSchema en la URL no es suficiente para Hibernate en la creaci\u00F3n de tablas:
# spring.jpa.properties.hibernate.default_schema=sc_compra

# ==========================
# Eureka Client Configuration
# ==========================
eureka.client.enabled=true
eureka.client.service-url.defaultZone=http://localhost:6666/eureka/

# ==========================
# Custom Security Properties (Internal)
# ==========================
# Usadas para la autenticaci\u00F3n Basic Auth del API Gateway al llamar a este servicio.
service.security.secure-key-username=daniKeySecureUsername
service.security.secure-key-password=daniKeySecureUsername!

# ... (otras propiedades existentes) ...

# Credenciales que usar\u00E1 compra-service para llamar a otros servicios (ej. inmueble-service)
# Deben coincidir con las credenciales de Basic Auth que espera el servicio destino (inmueble-service)
service.security.internal-call.username=${service.security.secure-key-username}
service.security.internal-call.password=${service.security.secure-key-password}

# ==========================
# Springdoc OpenAPI / Swagger UI Configuration
# ==========================
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.display-request-duration=true
springdoc.swagger-ui.operations-sorter=method
springdoc.swagger-ui.tags-sorter=alpha
springdoc.swagger-ui.title=API de Compras
springdoc.swagger-ui.description=Microservicio para registrar y consultar compras de inmuebles por usuario.
springdoc.swagger-ui.version=v0.0.1-SNAPSHOT